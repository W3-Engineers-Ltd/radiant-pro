// @RadicalOverwrite YES
// @RadicalGenerateTime {{generateTime}}
package {{packageName}}

import (
	"{{packagePath}}/models"
	"encoding/json"
	"strconv"
	"strings"
	radiant "github.com/W3-Engineers-Ltd/Radiant/server/web"
)

//  {{modelName|upperFirst}}Controller operations for {{modelName|upperFirst}}
type {{modelName|upperFirst}}Controller struct {
	radiant.Controller
}

// URLMapping ...
func (c *{{modelName|upperFirst}}Controller) URLMapping() {
	c.Mapping("Post", c.Post)
	c.Mapping("GetOne", c.GetOne)
	c.Mapping("GetAll", c.GetAll)
	c.Mapping("Put", c.Put)
	c.Mapping("Delete", c.Delete)
}

// Post ...
// @Title Post
// @Description create {{modelName|upperFirst}}
// @Param	body		body 	models.{{modelName|upperFirst}}	true		"body for {{modelName|upperFirst}} content"
// @Success 201 {int} models.{{modelName|upperFirst}}
// @Failure 403 body is empty
// @router / [post]
func (c *{{modelName|upperFirst}}Controller) Post() {
	var v models.{{modelName|upperFirst}}
	c.Ctx.Input.CopyBody(radiant.BConfig.MaxMemory)
	json.Unmarshal(c.Ctx.Input.RequestBody, &v)
	_, err := models.Add{{modelName|upperFirst}}(&v)
	 if err != nil {
        c.Data["json"] = ResponseData{
            Code:    1,
            Message: err.Error(),
         }
         c.ServeJSON()
         return
	 }
    c.Ctx.Output.SetStatus(201)
    c.Data["json"] = ResponseData{
        Code:    0,
        Message: "success",
        Data:    v,
    }
	c.ServeJSON()
}

// GetOne ...
// @Title Get One
// @Description get {{modelName|upperFirst}} by id
// @Param	id		path 	string	true		"The key for staticblock"
// @Success 200 {object} models.{{modelName|upperFirst}}
// @Failure 403 :id is empty
// @router /:id [get]
func (c *{{modelName|upperFirst}}Controller) GetOne() {
	idStr := c.Ctx.Input.Param(":id")
	id, _ := strconv.Atoi(idStr)
	v, err := models.Get{{modelName|upperFirst}}ById(id)
	if err != nil {
		c.Data["json"] = ResponseData{
           Code:    1,
           Message: err.Error(),
        }
        c.ServeJSON()
        return
	}
    c.Data["json"] = ResponseData{
        Code:    0,
        Message: "success",
        Data:    v,
    }
	c.ServeJSON()
}

// GetAll ...
// @Title Get All
// @Description get {{modelName|upperFirst}}
// @Param	query	query	string	false	"Filter. e.g. col1:v1,col2:v2 ..."
// @Param	fields	query	string	false	"Fields returned. e.g. col1,col2 ..."
// @Param	sortby	query	string	false	"Sorted-by fields. e.g. col1,col2 ..."
// @Param	order	query	string	false	"Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ..."
// @Param	limit	query	string	false	"Limit the size of result set. Must be an integer"
// @Param	offset	query	string	false	"Start position of result set. Must be an integer"
// @Success 200 {object} models.{{modelName|upperFirst}}
// @Failure 403
// @router / [get]
func (c *{{modelName|upperFirst}}Controller) GetAll() {
	var fields []string
	var sortby []string
	var order []string
	var query = make(map[string]string)
	var pageSize int = 20
	var current int

    {% for value in modelSchemas %}
    {% if value.Orm != "-" %}
    if v := c.GetString("{{value.Name|camelString|lowerFirst}}"); v != "" {
        query["{{value.Name|camelString|lowerFirst}}"] = v
    }
    {% endif %}
    {% endfor %}

	// fields: col1,col2,entity.col3
	if v := c.GetString("fields"); v != "" {
		fields = strings.Split(v, ",")
	}
	// limit: 10 (default is 10)
	if v, err := c.GetInt("pageSize"); err == nil {
		pageSize = v
	}
	// offset: 0 (default is 0)
	if v, err := c.GetInt("current"); err == nil {
		current = v
	}
	// sortby: col1,col2
	if v := c.GetString("sortby"); v != "" {
		sortby = strings.Split(v, ",")
	}
	// order: desc,asc
	if v := c.GetString("order"); v != "" {
		order = strings.Split(v, ",")
	}
	l, _ := models.GetAll{{modelName|upperFirst}}(query, fields, sortby, order, current, pageSize)
	c.Data["json"] = l
	c.ServeJSON()
}

// Put ...
// @Title Put
// @Description update the {{modelName|upperFirst}}
// @Param	id		path 	string	true		"The id you want to update"
// @Param	body		body 	models.{{modelName|upperFirst}}	true		"body for {{modelName|upperFirst}} content"
// @Success 200 {object} models.{{modelName|upperFirst}}
// @Failure 403 :id is not int
// @router /:id [put]
func (c *{{modelName|upperFirst}}Controller) Put() {
	idStr := c.Ctx.Input.Param(":id")
	id, _ := strconv.Atoi(idStr)
	v := models.{{modelName|upperFirst}}{
	    {{modelPrimaryKey}}: id,
	}

	c.Ctx.Input.CopyBody(radiant.BConfig.MaxMemory)
	json.Unmarshal(c.Ctx.Input.RequestBody, &v)
	err := models.Update{{modelName|upperFirst}}ById(&v);
	if err != nil {
		c.Data["json"] = ResponseData{
            Code:1,
            Message:err.Error(),
        }
       	c.ServeJSON()
        return
	}
	c.Data["json"] = ResponseData{
        Code:0,
        Message:"success",
    }
	c.ServeJSON()
}

// Delete ...
// @Title Delete
// @Description delete the {{modelName|upperFirst}}
// @Param	id		path 	string	true		"The id you want to delete"
// @Success 200 {string} delete success!
// @Failure 403 id is empty
// @router /:id [delete]
func (c *{{modelName|upperFirst}}Controller) Delete() {
	idStr := c.Ctx.Input.Param(":id")
	id, _ := strconv.Atoi(idStr)
	err := models.Delete{{modelName|upperFirst}}(id)
	if err != nil {
		c.Data["json"] = ResponseData{
            Code:1,
            Message:err.Error(),
        }
       	c.ServeJSON()
        return
	}
	c.Data["json"] = ResponseData{
        Code:0,
        Message:"success",
    }
	c.ServeJSON()
}
