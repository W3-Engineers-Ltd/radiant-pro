// @RadicalOverwrite YES
// @RadicalGenerateTime {{generateTime}}
package {{packageName}}

import (
	"errors"
	"fmt"
	"reflect"
	"strings"
	"github.com/W3-Engineers-Ltd/Radiant/client/orm"
	{% for value in packageImports %}"{{value}}"
    {% endfor %}
)

type {{modelName|upperFirst}} struct {
     {% for value in modelSchemas %}{{value.Name|camelString}} {{value.GoType}} `{% if value.OrmTag != "" %}orm:"{{value.OrmTag}}"{% endif %} json:"{{value.Name|camelString|lowerFirst}}" form:"{{value.Name|camelString|lowerFirst}}"` // {{value.Comment}}
     {% endfor %}
}


func (t *{{modelName|upperFirst}}) TableName() string {
	return "{{modelName|snakeString}}"
}

func init() {
	orm.RegisterModel(new({{modelName|upperFirst}}))
}

// Add{{modelName|upperFirst}} insert a new {{modelName|upperFirst}} into database and returns
// last inserted Id on success.
func Add{{modelName|upperFirst}}(m *{{modelName|upperFirst}}) (id int64, err error) {
	o := orm.NewOrm()
	{% for value in modelSchemas %}
        {% if value.Name == "created_at" %}
            m.CreatedAt = time.Now()
        {% endif %}
        {% if value.Name == "updated_at" %}
            m.UpdatedAt = time.Now()
        {% endif %}
    {% endfor %}
	id, err = o.Insert(m)
	return
}

// Get{{modelName|upperFirst}}ById retrieves {{modelName|upperFirst}} by Id. Returns error if
// Id doesn't exist
func Get{{modelName|upperFirst}}ById(id int) (v *{{modelName|upperFirst}}, err error) {
	o := orm.NewOrm()
	v = &{{modelName|upperFirst}}{
	    {{modelPrimaryKey}}: id,
	}
	if err = o.Read(v); err == nil {
		return v, nil
	}
	return nil, err
}

// GetAll{{modelName|upperFirst}}retrieves all {{modelName|upperFirst}} matches certain condition. Returns empty list if
// no records exist
func GetAll{{modelName|upperFirst}}(query map[string]string, fields []string, sortby []string, order []string,
	currentPage int, pageSize int) (ml ListData, err error) {
    page := NewPagination(currentPage, pageSize)
    ml = ListData{
        List:make([]interface{},0),
    }
	o := orm.NewOrm()
	qs := o.QueryTable(new({{modelName|upperFirst}}))
	// query k=v
	for k, v := range query {
		// rewrite dot-notation to Object__Attribute
		k = strings.Replace(k, ".", "__", -1)
		if strings.Contains(k, "isnull") {
			qs = qs.Filter(k, (v == "true" || v == "1"))
		} else {
			qs = qs.Filter(k, v)
		}
	}
	// order by:
	var sortFields []string
	if len(sortby) != 0 {
		if len(sortby) == len(order) {
			// 1) for each sort field, there is an associated order
			for i, v := range sortby {
				orderby := ""
				if order[i] == "desc" {
					orderby = "-" + v
				} else if order[i] == "asc" {
					orderby = v
				} else {
				    err = errors.New("Error: Invalid order. Must be either [asc|desc]")
					return
				}
				sortFields = append(sortFields, orderby)
			}
			qs = qs.OrderBy(sortFields...)
		} else if len(sortby) != len(order) && len(order) == 1 {
			// 2) there is exactly one order, all the sorted fields will be sorted by this order
			for _, v := range sortby {
				orderby := ""
				if order[0] == "desc" {
					orderby = "-" + v
				} else if order[0] == "asc" {
					orderby = v
				} else {
				    err = errors.New("Error: Invalid order. Must be either [asc|desc]")
					return
				}
				sortFields = append(sortFields, orderby)
			}
		} else if len(sortby) != len(order) && len(order) != 1 {
		    err = errors.New("Error: 'sortby', 'order' sizes mismatch or 'order' size is not 1")
			return
		}
	} else {
		if len(order) != 0 {
		    err = errors.New("Error: unused 'order' fields")
			return
		}
	}

	cnt,err := qs.Count()
	if err != nil {
		return
	}
	page.Total = int(cnt)

	var l []{{modelName|upperFirst}}
    qs = qs.OrderBy(sortFields...)
    _, err = qs.Limit(page.PageSize, (page.Current - 1) * page.PageSize).All(&l, fields...)
    if err != nil {
        return
    }

    if len(fields) == 0 {
        for _, v := range l {
            ml.List = append(ml.List, v)
        }
    } else {
        // trim unused fields
        for _, v := range l {
            m := make(map[string]interface{})
            val := reflect.ValueOf(v)
            for _, fname := range fields {
                m[fname] = val.FieldByName(fname).Interface()
            }
            ml.List = append(ml.List, m)
        }
    }
    ml.Pagination = *page
	return
}

// Update{{modelName|upperFirst}} updates {{modelName|upperFirst}} by Id and returns error if
// the record to be updated doesn't exist
func Update{{modelName|upperFirst}}ById(m *{{modelName|upperFirst}}) (err error) {
	o := orm.NewOrm()
	v := {{modelName|upperFirst}}{
	    {{modelPrimaryKey}}: m.{{modelPrimaryKey}},
	}
	// ascertain id exists in the database
	if err = o.Read(&v); err == nil {
		var num int64
		if num, err = o.Update(m); err == nil {
			fmt.Println("Number of records updated in database:", num)
		}
	}
	return
}

// Delete{{modelName|upperFirst}} deletes {{modelName|upperFirst}} by Id and returns error if
// the record to be deleted doesn't exist
func Delete{{modelName|upperFirst}}(id int) (err error) {
	o := orm.NewOrm()
	v := {{modelName|upperFirst}}{
   	    {{modelPrimaryKey}}: id,
	}
	// ascertain id exists in the database
	if err = o.Read(&v); err == nil {
		var num int64
		if num, err = o.Delete(&{{modelName|upperFirst}}{
		    {{modelPrimaryKey}}: id,
		}); err == nil {
			fmt.Println("Number of records deleted in database:", num)
		}
	}
	return
}
